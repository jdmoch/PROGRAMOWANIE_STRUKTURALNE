ZADANIE dlugosc listy


- 2 zadaania z napisow(modyfikowanie, modyfikowanie z przeliczeniem)
- 2 zadania z tablic wielowymiarowych(modyfukowanie tablicy w jakis sposob, przeliczenie)
- 2 zadania z list lub jedno z list i jedno ze struktury


#include <stdio.h>
#include <stdlib.h>
//5_2_1
void wyczysc(char *napis){
    napis[0]=0;
    }
int main()
{
    char *napis="pieczewo";
    printf(napis);
    printf("\n");
    printf("co wyswietli po wyczysczeniu");
    wyczysc(napis);
    printf(napis);
    free(napis);
}
//5_2_2
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
int main()
{
    char *napis="pieczewo";
    printf(napis);
    printf("\n");
    printf("dluogosc wyrazu = %d",dlugosc(napis));
}
//dlg bez spacji
int dlugosc(char *napis){
int i=0;
int pom=0;
while(napis[i]!=0)
{
    if(napis[i]!=32)
        pom++;
        i++;
}
return pom;
}
int main()
{
    char *napis="piec zewo";
    printf(napis);
    printf("\n");
    printf("dluogosc wyrazu = %d",dlugosc(napis));
}
// 5_2_3
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
int porownaj(char *napis1,char *napis2){
int i;
if(dlugosc(napis1)==dlugosc(napis2)){
    for(i=0;i<dlugosc(napis1);i++){
        if(napis1[i]!=napis2[i]){
            return 0;
        }
    }
    return 1;
}
else{
    return 0;
}
}
int main()
{
    char *napis="pieczewo";
    char *napis1="dlugi";
    char *napis2="dlugi";
    printf("%d",porownaj(napis1,napis2));
}
// 5.2.4 nie dziala
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
int slownikowo(char *napis1,char *napis2){
int i,x;
for(i=0;napis1[i] || napis2[i];i++){
    if(napis1[i]==0 && napis2[i]!=0){
        return 0;
    }
    if(napis1[i]!=0 && napis2[i]==0){
        return 1;
    }
    if(napis1[i]==0 && napis2[i]==0){
        for(x=0;napis1[x];x++){
            if(napis1[x]<napis2[x]==0){
                return 0;
            }
        }
    }
}
}
int main()
{
    char *napis="pieczewo";
    char *napis1="dlugi";
    char *napis2="wwadwadas";
    printf("%d",slownikowo(napis1,napis2));
}
// 5_2_5 kompletnie nie dziala
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
int slownikowo(char *napis1,char *napis2){
int i,x;
for(i=0;napis1[i] || napis2[i];i++){
    if(napis1[i]==0 && napis2[i]!=0){
        return 0;
    }
    if(napis1[i]!=0 && napis2[i]==0){
        return 1;
    }
    if(napis1[i]==0 && napis2[i]==0){
        for(x=0;napis1[x];x++){
            if(napis1[x]<napis2[x]==0){
                return 0;
            }
        }
    }
}
}
int main()
{
    char *piaty="student";
    char *szosty=malloc(20*sizeof(char));
    wypisz(piaty);
}
// 5_2_6 rowniez nie dziala :)))
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
void kopiujn(unsigned int n,char *nap1,char *nap2){
    int i;
    for(i=0;i<dlugosc(nap1)&&i<n;i++){
        nap2[i]=nap1[i];
    }
    nap2[i]=0;
}
void wypisz(char * napis){
printf("%s\n",napis);
}
int main()
{
    char *nap1="zgery";
    char *nap2="pykpyk";
    printf(nap1);
    kopiujn(3,nap1,nap2);
}
// 5_2_7
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
void sklej(char * nap1,char * nap2, char * nap3){
int i,j;
for(i=0;nap1[i]!=0;i++){
    nap3[i]=nap1[i];
}
for(j=0;nap2[j]!=0;i++,j++){
    nap3[i]=nap2[j];
}
nap3[i]=0;
}
void wypisz(char * napis){
printf("%s\n",napis);
}
int main()
{
    char *nap1="zgery ";
    char *nap2="pykpyk";
    char *nap3[70];
    sklej(nap1,nap2,nap3);
    printf(nap3);
}
// 5_2_8 
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
void wypisz(char * napis){
printf("%s\n",napis);
}
void maleduze(char * nap){
int i;
for(i=0;nap[i]!=0;i++){
    if(nap[i] >= 'a' && nap[i] <= 'z'){
    nap[i]=nap[i]+'A'-'a';
    }
}
}
int main()
{
    char nap1[50]="zgery";
    printf(nap1);
    printf("\n");
    maleduze(nap1);
    printf(nap1);
}
// 5_2_9 nie dziala
int dlugosc(char *napis){
    int i=0;
    while(napis[i]!=0)
        i++;
    return i;
    }
void wypisz(char * napis){
printf("%s\n",napis);
}
void wytnij(char * nap1,int n,int m){
    int i,j;
    char wynik[50];
    for(i=n;i<=m;i++){
    wynik[i]=nap1[i];
    }
    printf(wynik);
}
int main()
{
    char nap1[50]="informatyka";
    printf(nap1);
    printf("\n");
    wytnij(nap1,3,6);
}

#include <stdio.h>
///cw 5_2_9
void wytnij(char *napis,int n,int m){
int i,j;
for(j=0;napis[j]!=0;j++){
}
if(j+1>m){
    for(i=0;i+m<j;i++){
        napis[n+1]=napis[m+i+1];
    }
}
else if((n<j)&&(j+1<=m)){
    napis[n]=0;
}
}
int main()
{
    char napiszad9[40]="z tego napisu mamy cos wyciac";
    printf(napiszad9);
    printf("\n");
    wytnij(napiszad9,5,15);
    printf(napiszad9);
    printf("\n");
    char napiszakrotki[40]="krotki";
    printf(napiszakrotki);
    printf("\n");
    wytnij(napiszakrotki,8,12);
    printf(napiszakrotki);
    printf("\n");
    char napiszsredniodlugi[20]="sredni";
    printf(napiszsredniodlugi);
    printf("\n");
    wytnij(napiszsredniodlugi,4,10);
    printf(napiszsredniodlugi);
    return 0;
}
#include <stdio.h>
#include <stdbool.h>
///cw 5_2_10 nie dziala
void wytnij(char *napis,int n,int m){
int i,j;
for(j=0;napis[j]!=0;j++){}
if(j+1>m){
    for(i=0;i+m<j;i++){
        napis[n+1]=napis[m+i+1];
    }
}
else if((n<j)&&(j+1<=m)){
    napis[n]=0;
}
}
bool porownaj(char * napis1,char * napis2,int n){
int i;
for(i=0;(napis1[i]!=0)&&napis2[i]!=0;i++)
    if(napis1[n+1]!=napis2[i])
{
    return false;
}
if(napis2[i]==0){
    return true;
}
else{
    return false;
}
}
void wytnij2(char *napis1,char *napis2){
int i,dl;
for(dl=0;napis2[dl]!=0;dl++){}
    for(i=0;napis1[i]!=0;i++){
     if(porownaj(napis1,napis2,i))
     {
         wytnij(napis1,i,i+dl-1);
         return;
     }
    }
}
int main()
{
    char napiszad101[40]="napis z ktorego ktorego wycinamy";
    char napiszad102[40]="ktorego";
    wytnij2(napiszad101,napiszad102);
    printf(napiszad101);
    return 0;
}
#include <stdio.h>
#include <stdbool.h>
///cw 5_2_13 nie dziala
void wytnijtesame(char * napis1,char *napis2){
int i,j;
for(int i=0,j=0;napis1[i]!=0;i++)
{
    if(napis1[i]!=napis2[i]){
        napis1[j]=napis1[i];
        j++;
    }
}
napis1[j]=0;
}
int main()
{
    char napiszad131[40]="arbuzek";
    char napiszad132[40]="arbiter";
    wytnijtesame(napiszad131,napiszad132);
    printf(napiszad131);
    return 0;
}
#include <stdio.h>
///cw 5_2_20
char * godzina(int godz,int min,int sec){
char * wynik=malloc(9*sizeof(char));
sprintf(wynik,"%02d:%02d:%02d",godz,min,sec);
return wynik;
}
int main()
{
    printf(godzina(14,19,5));
    return 0;
}
#include <stdio.h>
#include <wchar.h>
///cw 5_2_26
void maleduze(char * napis){
int i;
for(i=0;napis[i]!=0;i++){
napis[i]=towupper(napis[i]);
}
}
int main()
{
    char napis1[80]="Adi ma kota";
    printf(napis1);
    printf("\n");
    maleduze(napis1);
    printf(napis1);
    return 0;
}
#include <stdio.h>
#include <wchar.h>
#include <string.h>
///cw 5_2_22
char * sklej(char * napis1,char *napis2,char * napis3){
char * wyn=malloc((strlen(napis1)+strlen(napis2)+strlen(napis3)+1)*sizeof(char));
strcpy(wyn,napis1);
strcat(wyn,napis2);
strcat(wyn,napis3);
return wyn;
}
int main()
{
    char napis1[80]="Adi ma kota";
    char napis2[30]=" i nie jest szczesliwy";
    char napis3[40]=" bo studiuje informatyke";
    printf(sklej(napis1,napis2,napis3));
    return 0;
}

TABLICE----------------------------------------------


POTRZEBNE
#include <stdio.h>
#include <stdlib.h>



int **alokuj(unsigned int n, unsigned int m){
    int **t = malloc(n*sizeof(int*));
    int i;
    for(i=0;i<n;i++){
        t[i] = malloc(m*sizeof(int*));
    }
    return t;
}

int(* alokuj2(unsigned int n, unsigned int m))[]{
    return malloc(n*sizeof(int[m]));
}

void wypisz(int **t, unsigned int n, unsigned int m){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t", t[i][j]);
        }
        printf("\n");
    }
}

void wypisz2(unsigned int n, unsigned int m, int t[][m]){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t", t[i][j]);
        }
        printf("\n");
    }
}

void wczytaj(int **t, unsigned int n, unsigned int m){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d", &t[i][j]);
        }
    }
}

void wczytaj2(unsigned int n, unsigned int m, int t[][m]){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            scanf("%d", &t[i][j]);
        }
    }
}

int main() {
    int **t = alokuj(3,3);
    wczytaj(t,3,3);
    printf("\n");
    wypisz(t,3,3);
    printf("\n");
    int tab[3][4];
    wczytaj2(3, 4, tab);
    printf("\n");
    wypisz2(3, 4, tab);
    printf("\n");
    int tablica[4][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
    wypisz2(4, 4, tablica);


}

zad6.2.3

void zwolnij(int **t, unsigned int n, unsigned int m){
    int i;
    for(i=0;i<n;i++){
        free(t[i]);
    }
    free(t);
}


zad6.2.7
int **alokujtrojkat(unsigned int n){
    int **t = malloc(n*sizeof(int*));
    int i;
    for(i=0;i<n;i++){
        t[i] = malloc((i+1)*sizeof(int*));
    }
    return t;
}

zad na plusa

int **alokujpierscien(unsigned int n){
    int **t = malloc(n*sizeof(int*));
    int i;
    for(i=0;i<n;i++){
        if(i==0 or i==n-1){
        t[i] = malloc(n*sizeof(int*));
    }else
        t[i] = malloc(2*sizeof(int*));
    }
    return t;
}-
-----------------------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>

///cw 6_2_1
int** alokuj(unsigned int n, unsigned int m){
int *t=malloc(n*sizeof(int));
int i;
for(i=0;i<n;i++)
{
    t[i]=malloc(m*sizeof(int));
}
return t;
}

///cw 6_2_2
int(* alokuj2(unsigned int n, unsigned int m))[]{
return malloc(n*sizeof(int[m]));
}

///cw 6_2_18
void wypisz(int **t, unsigned int n, unsigned int m){
    int i,j;
for(i=0;i<n;i++)
{
    for(j=0;j<m;j++)
{
    printf("%d\t",t[i][j]);
}
printf("\n");
}
}

void wypisz2(unsigned int n,unsigned int m, int t[][m]){
int i,j;
for(i=0;i<n;i++)
{
    for(j=0;j<m;j++)
{
       printf("%d\t",t[i][j]);
    }
    printf("\n");
}
}

///wczytaj
void wczytaj(int** t, unsigned int n,unsigned int m){
int i,j;
for(i=0;i<n;i++)
{
    for(j=0;j<m;j++)
{
       scanf("%d",&t[i][j]);
    }
}
}

///wczytaj2
void wczytaj2(unsigned int n,unsigned int m, int t[][m]){
int i,j;
for(i=0;i<n;i++)
{
    for(j=0;j<m;j++)
{
       scanf("%d",&t[i][j]);
    }
}
}

int main(){
    ///tablica tablic
      int **t=alokuj(3,3);
    wczytaj(t,3,3);
wypisz(t,3,3);
///tablica dwuwymiarowa
int t2[3][3];
wczytaj2(3,3,t2);
wypisz2(3,3,t2);
///inicjalizacja bez wczytywania
int t3[4][4]={{20,2,5,8},{2,8,31,4},{5,6,7,8},{5,6,7,8}};
wypisz2(4,4,t3);
}

//6.2.9
//6.2.10
#include <stdio.h>
#include <stdlib.h>
void wypisz(int **t, unsigned int n, unsigned int m){
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf("%d\t", t[i][j]);
        }
        printf("\n");
    }
}
void wypisz2(unsigned int n,unsigned int m,int t[][m]){
int i,j;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        printf("%d\t",t[i][j]);
    }
    printf("\n");
}
}
int ** alokuj(unsigned int n,unsigned int m){
int **t=malloc(n*sizeof(int*));
int i;
for(i=0;i<n;i++){
    t[i]=malloc(m*sizeof(int));
}
return t;
}
void wczytaj(int ** t,unsigned int n,unsigned int m){
int i,j;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        scanf("%d",&t[i][j]);
    }
}
}
void zeruj(int** t,unsigned int n,unsigned int m){
int i,j;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        t[i][j]=0;
    }
}
}
void zeruj3(unsigned int n,unsigned int m,int t[][m]){
int i,j;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        t[i][j]=0;
    }
}
}
int main()
{
    int **t=alokuj(3,2);
    wczytaj(t,3,2);
    wypisz(t,3,2);
    zeruj(t,3,2);
    wypisz(t,3,2); 
    int t[3][7]={{20,2,5,7,8,-11,-81},{2,8,31,14}};
    wypisz2(3,7,t);
    zeruj3(3,7,t);
    wypisz2(3,7,t);
    return 0;
}
//6.2.12
int suma2(int** t,unsigned int n,unsigned int m){
int i,j;
int suma=0;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        suma=suma+t[i][j];
    }
}
//main
printf("suma: %d",suma2(t,3,2));
/// na kolokwium zadanie: jezeli beda poweuidzmy 5 takich samych wynikow to zwroc nie skrajny wieresz (czyli nie pierwszy i nie ostatni)
// robilismy 6.2.16 ale to jest to samo co 17
//6.2.16 ale na tablicy 2wymiarowej
int max(unsigned int n,unsigned int m,int t[][m]){
int i,j;
int max=0;
int suma=0;
int indeks=0;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        suma=suma+t[i][j];
    }
    if(i==0){
        max=suma;
    }
    if(max<suma){
        max=suma;
        indeks=i;
    }
    suma=0;
}
//main
int t[4][3]={{4,1,8},{2,3,2},{3,10,6},{5,4,2}};
    wypisz2(4,3,t);
    printf("indeks %d",max(4,3,t));
//6.2.17
double max(unsigned int n,unsigned int m,int t[][m]){
int i,j;
int suma,max;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        suma=0;
        suma=suma+t[i][j];
    }
    if(i==0){
        max=suma;
    }
    if(max<suma){
        max=suma;

    }
}
return ((double)(max)/m);
}
//main
printf("wartosc %lf",max(4,3,t));
//6.2.19 nie dziala
void przepisz(int **t,int **r,unsigned int m,unsigned int n){
int i,j;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        r[i][j]=t[i][j];
    }
}
}
//main 
    int **t=alokuj(3,3);
    int **r=alokuj(3,3);
    wczytaj(t,3,3);
    wypisz(t,3,3);
    przepisz(t,r,3,3);
    wypisz(r,3,3);
//6.2.20
void zamiana(int **t,int **r,unsigned int m,unsigned int n){
int i,j;
int pom;
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        pom=r[i][j];
        r[i][j]=t[i][j];
        t[i][j]=pom;
    }
}
}
//main 

    int **t=alokuj(3,3);
    int **r=alokuj(3,3);
    wczytaj(t,3,3);
    wypisz(t,3,3);
    wczytaj(r,3,3);
    wypisz(r,3,3);
    zamiana(t,r,3,3);
    wypisz(t,3,3);
    wypisz(r,3,3);
    return 0;
//6.2.21
void odwrotnosc(int **t,unsigned int m,unsigned int n){
int i,j;
int pom;
for(i=0;i<n;i++){
    for(j=0;j<m/2;j++){
        pom=t[i][j];
        t[i][j]=t[i][m-1-j];
        t[i][m-1-j]=pom;
    }
}
}
//main
    int **t=alokuj(3,3);
    wczytaj(t,3,3);
    wypisz(t,3,3);
    odwrotnosc(t,3,3);
    wypisz(t,3,3);
///////// ** tablica dwuwymiarowa ///////////////////
///////// t[][] tablica tablic /////////////////////
//6.2.23
void zamianawierszy(unsigned int n,unsigned int m,int t[][m]){
int i,j;
int pom;
for(j=0;j<m;j++){
    pom=t[n-1][j];
    for(i=n-1;i>0;i--){
        t[i][j]=t[i-1][j];
    }
    t[0][j]=pom;
}
}
//main
int t[4][3]={{4,1,8},{2,3,2},{3,10,6},{5,4,2}};
    wypisz2(4,3,t);
    zamianawierszy(4,3,t);
    wypisz2(4,3,t);
    return 0
    ///// duze prawdopodobienstwo ze pojawi sie zadanie tego typu na kolokwium (troche zmienione niz na lekcji np moze dwa w dol czy cos)
/// wszystkie zadania z tablic do kolokwium omowione
//na next zajeciach zadania mniej wazne z tablic 
//zad dodatkowe
/// zrob funkcje ktora bedzie int ** tarcza_do_rzutek(unsigned int n)
/// jesli wywowlany na 1x1 => 1
/// 2x2 => 11 11 
/// 3x3 => 111 121 111
/// 4x4 => 1111 1221 1221 1111
/// 5x5 => 11111 12221 12321 12221 11111
///itd. (te liczby to macierze, spacja oznacza nowy wiersz)

7.2.1/ 7.2.2

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct trojkat{
    double a, b, c;
};

double obwod(struct trojkat t){
    return t.a + t.b + t.c;
}

double pole(struct trojkat t){
    double p, P;
    p = (t.a+t.b+t.c)/2.0;
    P = sqrt((p*(p-t.a)*(p-t.b)*(p-t.c)));
    return P;
}

void czy_to_trojkat(struct trojkat t){
    if((t.a+t.b>t.c) && (t.a+t.c>t.b) && (t.c+t.b>t.a)){
        printf("Taki trojkat isnieje\n");
    }else{
        printf("Taki trojkat nie isnieje\n");
    }
}

void jakitrojkot(struct trojkat t){
    if((t.a*t.a + t.b*t.b > t.c*t.c) && (t.c*t.c + t.b*t.b > t.a*t.a) && (t.a*t.a + t.c*t.c > t.b*t.b)){
       printf("Taki trojkat jest ostry\n");
    }
    else if((t.a*t.a + t.b*t.b == t.c*t.c) || (t.c*t.c + t.b*t.b == t.a*t.a) || (t.a*t.a + t.c*t.c == t.b*t.b)){
       printf("Taki trojkat jest prostokatny\n");
    }
    else if((t.a*t.a + t.b*t.b < t.c*t.c) || (t.c*t.c + t.b*t.b < t.a*t.a) || (t.a*t.a + t.c*t.c < t.b*t.b)){
       printf("Taki trojkat jest rozwarty\n");
    }
}


void przepisz(struct trojkat t1, struct trojkat *t2){
    *t2 = t1;
}

void wypisz(struct trojkat t){
    printf("a: %f\n", t.a);
    printf("b: %f\n", t.b);
    printf("c: %f\n", t.c);
    printf("\n");
}

int main()
{
    struct trojkat t1;
    t1.a = 3;
    t1.b = 4;
    t1.c = 5;

    struct trojkat *t2;
    t2 = malloc(sizeof(struct trojkat));
    przepisz(t1, t2);

    wypisz(t1);
    wypisz(*t2);

    printf("Obwod: %f\n", obwod(t1));
    printf("Pole: %f\n", pole(t1));
    czy_to_trojkat(t1);
    jakitrojkot(t1);
    printf("%d\n", sizeof(double));
    printf("%d\n", sizeof(struct trojkat));



    return 0;
}


7.2.3

struct punkt{
    double x, y, z;
};


double odlegloscpunktu(struct punkt P, struct punkt Q){

    return sqrt((P.x-Q.x)*(P.x-Q.x) + (P.y-Q.y)*(P.y-Q.y) + (P.z-Q.z)*(P.z-Q.z));

}

double minimum(struct punkt tab[], int n){
int i, j;
double pom;
double min = odlegloscpunktu(tab[0], tab[1]);

for(i=0;i<n-1;i++){
    for(j=i+1;j<n;j++){
       pom = odlegloscpunktu(tab[i],tab[j]);
    }
    if(pom<min){
        min=pom;
    }

}
return min;
}

w main:

struct punkt p1;
    p1.x = 1;
    p1.y = 7;
    p1.z = 2;

    struct punkt p2;
    p2.x = 4;
    p2.y = 9;
    p2.z = 0;
    
    struct punkt p3;
    p3.x = 2;
    p3.y = 5;
    p3.z = 8;
    
    printf("Odleglosc: %f", odlegloscpunktu(p1, p2));
    
    w domu : 7.2.4/5/6
    
    7.2.7
    
    struct zespolona{
    double re, im;
};




void dodaj(struct zespolona z1, struct zespolona z2){
    double a = z1.re + z2.re;
    double b = z1.im + z2.im;

    printf("Wynik: %f + %fi\n", a, b);
}

struct zespolona dodaj2(struct zespolona z1, struct zespolona z2){
        struct zespolona suma;
        suma.re = z1.re + z2.re;
        suma.im = z1.im + z2.im;
        return suma;
};

struct zespolona iloczyn(struct zespolona z1, struct zespolona z2){
        struct zespolona iloczyn;
        iloczyn.re = z1.re*z2.re - z1.im*z2.im;
        iloczyn.im = z1.re*z2.im + z1.im*z2.re;
        return iloczyn;
};

void wypisz(struct zespolona z){
    printf("Wynik: %f + %fi\n", z.re, z.im);
}

void sprz(struct zespolona z){
    printf("Wynik: %f + %fi\n", z.re, -z.im);
}

struct zespolona sprz2(struct zespolona z1){
        struct zespolona sprz;
        sprz.re = z1.re;
        sprz.im = -z1.im;
        return sprz;
};

w main:

struct zespolona z1;
    z1.re = 1;
    z1.im = 3;

    struct zespolona z2;
    z2.re = 2;
    z2.im = 1;

    dodaj(z1, z2);
    wypisz(dodaj2(z1, z2));
    wypisz(iloczyn(z1, z2));
    sprz(z1);
    wypisz(sprz2(z1));
    return 0;
    
    
    --- w domu można zrobić na iloczyn
    (oblicz (a+bi)/(c+di) i wpisz jak dodawanie mnożenie ko podzielne jakoś przez mianownik (kombinuj))
    
7.2.10

#include <stdio.h>
#include <stdlib.h>

union super_int{
    int i;
    unsigned int u;
};

struct wiele_int{
    int i;
    unsigned int u;
};

int main()
{
    struct wiele_int X;
    union super_int Y;
    printf("%d\n", sizeof(int));
    printf("%d\n", sizeof(unsigned int));

    printf("%d\n", sizeof(X));
    printf("%p\n", &X);
    printf("%p\n", &X.i);
    printf("%p\n", &X.u);

    printf("%d\n", sizeof(Y));
    printf("%p\n", &Y);
    printf("%p\n", &X.i);
    printf("%p\n", &X.u);
    return 0;
}


#include<stdio.h>
#include<math.h>
#include<stdbool.h>
#include<stdlib.h>
#include<wchar.h>
#include<wctype.h>
#include<ctype.h>
#include<string.h>

///cw 7_2_1
struct trojkat{
double a,b,c;
};

double obwod(struct trojkat t){
return t.a+t.b+t.c;
}


///cw 7_2_2
void przepisz(struct trojkat t1, struct trojkat *t2){
    *t2=t1;
}

///cw 7_2_3
struct punkt{ /// jak obliczyc odleglosc miedzy punktami (1,3,5), (4,2,9). sqrt((1-4)^2+(3-2)^2+(5-9)^2)=sqrt(9+1+16)=sqrt(26) = 5,1.
double x,y,z; ///(x,y,z), ...
};
///co powinien zwrocic program z zadania 7_2_3 dla (4,7,1), (2,2,8), (5,6,0)  -> sqrt(78) , sqrt(77) , sqrt(3).  WYNIK sqrt(3).

double minimum(struct punkt tab[], int n){
int i,j;
double pom;
double min=sqrt(pow(tab[1].x-tab[0].x,2)
                +pow(tab[1].y-tab[0].y,2)+pow(tab[1].z-tab[0].z,2));
for(i=0;i<n-1;i++)
{
    for(j=i+1;j<n;j++)
    {
        pom=sqrt(pow(tab[j].x-tab[i].x,2)
                +pow(tab[j].y-tab[i].y,2)+pow(tab[j].z-tab[i].z,2));
    }
    if(pom<min)
    {
        min=pom;
    }
}
return min;
}

///cw 7_2_10
union super_int{
int i;
unsigned int u;
};

///Listy bez glowy
/// cw 7_3_1
struct element{
int i;                              /// [ liczba calkowita ktora przechowujemy ;   adres nastepnego elementu ] ----> [int, adres nastepnej] -->
struct element *next;
};

struct element *utworz(){
return NULL;
};

///cw 7_3_2
void wyczysc(struct element* Lista){
struct element *wsk=Lista;
while(Lista!=NULL){
    Lista=Lista->next;
    free(wsk);
    wsk=Lista;
}
}

///cw 7_3_3
struct element * dodajnapoczatek(struct element* Lista, int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
wsk->next=Lista;
return wsk;
}

///cw 7_3_4
struct element *dodajnakoniec(struct element * Lista, int a){
struct element *wsk;
if(Lista==NULL)
{
    Lista=wsk=malloc(sizeof(struct element));
}
else
{
    wsk=Lista;
while(wsk->next!=NULL)
{
    wsk=wsk->next;
}
wsk->next=malloc(sizeof(struct element));
wsk=wsk->next;
}
wsk->i=a;
wsk->next=NULL;
return Lista;
}

///cw 7_3_5
struct element * dodajodpowiednio(struct element* Lista,
                                struct element* elem, int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
if(elem==NULL)
    {
wsk->next=Lista;
Lista=wsk;
}
else
{
    wsk->next=elem->next;
    elem->next=wsk;
}
return Lista;
}

///cw 7_3_6
struct element * znajdz(struct element * Lista, int a){
while((Lista!=NULL)&&(Lista->i!=a))
{
    Lista=Lista->next;
}
return Lista;
}

///cw 7_3_7
struct element * usun(struct element * Lista, int a){
    struct element *wsk,*wsk2;
    if (Lista==NULL)
    {
        return Lista;
    }
    wsk=Lista;
    if(Lista->i==a)
    {
        Lista=Lista->next;
        free(wsk);
    }
    else{
while((wsk->next!=NULL)&&(wsk->next->i!=a))
      {
          wsk=wsk->next;
      }
      if(wsk->next!=NULL){
        wsk2=wsk->next;
        wsk->next=wsk2->next;
        free(wsk2);
      }
}
return Lista;
}

///cw 7_3_8
struct element *usunwybrany(struct element* Lista,
                            struct element *elem){
struct element *wsk,*wsk2;
if(Lista==NULL)
{
    return Lista;
}
wsk=Lista;
                       if(Lista==elem){
                        Lista=Lista->next;
                        free(wsk);
                        return Lista;
                       }
                    while((wsk->next!=NULL)&&(wsk->next!=elem))
                        wsk=wsk->next;
                    if(wsk->next!=NULL)
                    {
                        wsk2=wsk->next;
                        wsk->next=wsk2->next;
                        free(wsk2);
                    }
                    return Lista;
                            };

///cw 7_3_9
struct element *usunwybrany2(struct element* Lista,
                            struct element *elem){
struct element *wsk;
if(Lista==NULL)
{
    return Lista;
}
                       if(Lista==elem){
                            wsk=Lista;
                        Lista=Lista->next;
                       }
                       else if(elem->next==NULL)
                    {
                        return Lista;
                    }
                    else
                    {
                        wsk=elem->next;
                        elem->next=wsk->next;
                    }
                    free(wsk);
                    return Lista;
                            }

///Listy z glowa
/// cw 7_3_10

struct element *utworzzglowa(){
    struct element *wsk=malloc(sizeof(struct element));
    wsk->next=NULL;
return wsk;
}

///cw 7_3_11
void wyczysczglowa(struct element* Lista){
struct element *wsk=Lista->next;
Lista=wsk;
while(Lista!=NULL){
    Lista=Lista->next;
    free(wsk);
    wsk=Lista;
}
}

///cw 7_3_12
void dodajnapoczatekzglowa(struct element *Lista,int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
wsk->next=Lista->next;
Lista->next=wsk;
}

///cw 7_3_13
void dodajnakonieczglowa(struct element *Lista,int a){
struct element *wsk=Lista;
while(wsk->next!=NULL)
{
    wsk=wsk->next;
}
wsk->next=malloc(sizeof(struct element));
wsk=wsk->next;
wsk->i=a;
wsk->next=NULL;
}

///cw 7_3_17
void usun_z_glowa(struct element * Lista, int a){
struct element * wsk;
while((Lista->next!=NULL && Lista->next->i!=a))
Lista=Lista->next;
if(Lista->next!=NULL){
wsk=Lista->next;
Lista->next=wsk->next;
free(wsk);
}
}

///Pozostale zadania z list jednokierunkowych
///cw 7_3_20
///bezglowy
void zeruj(struct element * Lista){
while(Lista!=NULL){
 Lista->i=0;
 Lista=Lista->next;
}
}

///z glowa
void zerujzglowa(struct element *Lista){
while(Lista->next!=NULL){
 Lista=Lista->next;
 Lista->i=0;
}
}

///mozna tez modyfikujac algorytm bez glowy
void zerujzglowa2(struct element * Lista){
    Lista=Lista->next;
while(Lista!=NULL){
 Lista->i=0;
 Lista=Lista->next;
}
}

///cw 7_3_21
///bezglowy
void bezwzgledna(struct element * Lista){
while(Lista!=NULL){
 Lista->i=abs(Lista->i);
 Lista=Lista->next;
}
}


///cw 7_3_23
struct trojka{
unsigned int a,b,c;
struct trojka * next;
};

bool czyspelnia(struct trojka *e){
if(e->a*e->a+e->b*e->b==e->c*e->c)
{
    return true;
}
else
{
    return false;
}
}

///wersja bez glowy
struct trojka * pitagoras(struct trojka*Lista){
struct trojka * pom,*pom2;
while((Lista!=NULL)&&(!czyspelnia(Lista))){
    pom=Lista;
    Lista=Lista->next;
    free(pom);
}
if(Lista==NULL)
{
    return NULL;
}
pom=Lista;
while(pom->next!=NULL){
    if(czyspelnia(pom->next))
    {
        pom=pom->next;
    }
    else
    {
        pom2=pom->next;
        pom->next=pom2->next;
        free(pom2);
    }
}
return Lista;
}

///z glowa
void pitagoraszglowa(struct trojka * Lista){
struct trojka* pom;
while(Lista->next!=NULL){
    if(czyspelnia(Lista->next))
    {
        Lista=Lista->next;
    }
    else
    {
        pom=Lista->next;
        Lista->next=pom->next;
        free(pom);
    }
}
}

///cw 7_3_24
int suma(struct element *Lista){
int sum=0;
while(Lista!=NULL){
    sum=sum+Lista->i;
    Lista=Lista->next;
}
return sum;
}
///cw 7_3_24
int dlugosc(struct element *Lista){
int sum=0;
while(Lista!=NULL){
    sum=sum+1;
    Lista=Lista->next;
}
return sum;
}

int sumazglowa(struct element * Lista){
int sum=0;
Lista=Lista->next;
while(Lista!=NULL){
    sum=sum+Lista->i;
    Lista=Lista->next;
}
return sum;
}

///cw 7_3_25
int minimumbezglowy(struct element * Lista){
int min=Lista->i;
while(Lista!=NULL){
    if(Lista->i<min)
    {
        min=Lista->i;
    }
    Lista=Lista->next;
}
return min;
}

int minimumzglowa(struct element * Lista){
int min=Lista->next->i;
while(Lista!=NULL){
        Lista=Lista->next;
    if(Lista->i<min)
    {
        min=Lista->i;
    }
}
return min;
}
///cw 7_3_30
struct element* konkatenacja(struct element * Lista1,struct element * Lista2){
struct element* wsk=Lista1;
while(wsk->next!=NULL)
{
     wsk=wsk->next;
}
wsk->next=Lista2;
return Lista1;
}
///cw 7_3_31
struct element* odwroc(struct element * Lista){
 struct element * pom1, *pom2;
 if((Lista==NULL)||(Lista->next==NULL))
    return Lista;
pom1=Lista->next;
pom2=pom1->next;
Lista->next=NULL;
pom1->next=Lista;
while(pom2!=NULL)
{
    Lista=pom1;
    pom1=pom2;
    pom2=pom2->next;
    pom1->next=Lista;
}
return pom1;
}

///cw 7_3_32
struct element* konkatenacja_na_przemian(struct element * Lista1,struct element * Lista2){
struct element* wsk1=Lista1;
struct element* wsk2=Lista2;
struct element* pom1;
struct element* pom2;
while(wsk2->next!=NULL)
{
    pom1=wsk1->next;
wsk1->next=wsk2;
pom2=wsk2->next;
wsk2->next=pom1;
}
return Lista1;
}


///wypisz
void wypisz(struct element * Lista){
while(Lista!=NULL){
            printf("%d\n",Lista->i);
    Lista=Lista->next;
}
printf("\n");
}

///wypisz
void wypisz_adresy(struct element * Lista){
while(Lista!=NULL){
            printf("%p\n",Lista);
    Lista=Lista->next;
}
printf("\n");
}

///funkcje dla listy zawierajacej trojki
///wypisz trojki
void wypisztrojki(struct trojka * Lista){
while(Lista!=NULL){
            printf("%d",Lista->a);
            printf("%d",Lista->b);
            printf("%d",Lista->c);
    Lista=Lista->next;
    printf("\n");
}
}

struct trojka *utworztrojke(){
return NULL;
};

struct trojka *dodajnakoniectrojki(struct trojka * Lista, unsigned int x,unsigned int y,unsigned int z){
struct trojka *wsk;
if(Lista==NULL)
{
    Lista=wsk=malloc(sizeof(struct trojka));
}
else
{
    wsk=Lista;
while(wsk->next!=NULL)
{
    wsk=wsk->next;
}
wsk->next=malloc(sizeof(struct trojka));
wsk=wsk->next;
}
wsk->a=x;
wsk->b=y;
wsk->c=z;
wsk->next=NULL;
return Lista;
}


int main(){

///deklaracja i wprowadzenie elementow
///cw 7_3_1
///druga lista do konkatenacji
    struct element * lista2=utworz();
    lista2=dodajnakoniec(lista2,9);
    lista2=dodajnakoniec(lista2,6);
    lista2=dodajnakoniec(lista2,2);
     struct element * lista3=utworz();
     lista3=dodajnakoniec(lista3,-17);
    lista3=dodajnakoniec(lista3,95);
    lista3=dodajnakoniec(lista3,-22);
    printf("\nListy do sklejenia:\n");
     wypisz(lista2);
     printf("\n");
    wypisz(lista3);
    lista2=konkatenacja(lista2,lista3);
     wypisz(lista2);
    struct element * lista=utworz();
    /// cw 7_3_4
    lista=dodajnakoniec(lista,4);
    wypisz(lista);
    lista=dodajnakoniec(lista,15);
    wypisz(lista);
    lista=dodajnakoniec(lista,3);
    wypisz(lista);
     lista=dodajnakoniec(lista,-7);
     wypisz(lista);
    lista=dodajnakoniec(lista,9);
    wypisz(lista);
    lista=dodajnakoniec(lista,-2);
    wypisz(lista);
    /// cw 7_3_3
    lista=dodajnapoczatek(lista,6);
    wypisz(lista);
    wypisz_adresy(lista);
    ///cw 7_3_7
    lista=usun(lista,3);
    wypisz(lista);
    ///cw 7_3_31
    printf("Tu wypisujemy liste odwrotna\n");
    lista=odwroc(lista);
    wypisz(lista);

    ///cw 7_3_21
    bezwzgledna(lista);
    wypisz(lista);
    ///cw 7_3_24
    printf("%d\n\n",suma(lista));
    ///cw 7_3_6
    printf("%p\n",znajdz(lista,15));
    ///cw 7_3_8
    usunwybrany(lista,znajdz(lista,15));
    wypisz(lista);
     ///cw 7_3_9
    usunwybrany2(lista,znajdz(lista,7));
    wypisz(lista);
    ///cw 7_3_20
    zeruj(lista);
    wypisz(lista);
///jak dzialac na listach ,,niestandardowych" np. zawierajacych trojki
    struct trojka* listatrojek= utworztrojke();
dodajnakoniectrojki(listatrojek,1,2,3);
dodajnakoniectrojki(listatrojek,4,3,5);
dodajnakoniectrojki(listatrojek,4,3,2);
wypisztrojki(listatrojek);
return 0;
}

